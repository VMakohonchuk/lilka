.. _lua-intro:

Написання програм на Lua
========================

Основна прошивка Лілки має вбудовану віртуальну машину мови програмування Lua. Це дозволяє писати та виконувати програми на Lua прямо з SD-картки, без необхідності компіляції чи перепрошивання Лілки.

.. warning:: Якщо ви не знайомі з мовою Lua, рекомендуємо прочитати туторіал з Lua перед тим, як продовжувати: https://www.lua.org/pil/1.html

Приклад програми
----------------

Оскільки Lua сама по собі - це універсальна мова програмування, вона не має вбудованих функцій для роботи з дисплеєм, звуком тощо. Тому для роботи з цими пристроями на Лілці використовуються спеціальні вбудовані модулі, які надають доступ до функцій пристроїв.

Модулі в Lua на Лілці завантажуються автоматично - не потрібно писати жодних ``require(...)``. Ось приклад простої програми на Lua, яка виводить текст "Hello, world!" на екран:

.. code-block:: lua
    :linenos:

    -- Заповнюємо екран чорним кольором:
    display.fill_screen(display.color565(0, 0, 0))

    -- Виводимо текст "Hello, world!" на екран:
    display.set_cursor(0, 32)
    display.print("Hello, world!")

    -- Чекаємо 2 секунди:
    util.sleep(2000)

    -- Відображаємо все, що ми намалювали на екрані:
    display.render()

    -- На цьому програма автоматично завершиться.

Ви можете зберегти цей код у файл з розширенням ``.lua`` на SD-картці, а потім виконати його, обравши його в браузері SD-картки.

Повний перелік доступних модулів та їх функцій можна знайти в розділі :doc:`Lua API </lua/index>`.

.. _lua-games:

Написання ігор
--------------

В іграх важливо, щоб гра була плавною та виконувалася з певною стабільною кількістю кадрів на секунду.

Для простих програм на Lua, які не вимагають точності в швидкості виконання, можна використовувати :lua:func:`util.sleep()` для затримки виконання програми. Однак це незручно для ігор.

Для цього існує можливість визначити функції :lua:func:`lilka.init()`, :lua:func:`lilka.update()` і :lua:func:`lilka.draw()`. Якщо при запуску вашої програми Лілка знайде цю функції, вона буде викликати їх автоматично.

* :lua:func:`lilka.init()` викликається один раз при запуску програми.

* :lua:func:`lilka.update()` викликається 30 разів на секунду, тому ви можете використовувати його для оновлення стану гри та обробки введення користувача.

* :lua:func:`lilka.draw()` викликається після :lua:func:`lilka.update()` та використовується для малювання графіки на екрані.

.. note:: Вам не потрібно викликати :lua:func:`display.render()` всередині вашої :lua:func:`lilka.draw()` - це буде зроблено автоматично. Звісно, ви можете здійснювати все малювання графіки в функції :lua:func:`lilka.update()`, але для читабельності коду краще розділити логіку гри та малювання графіки на окремі функції. Для цього і є поділ на :lua:func:`lilka.update()` та :lua:func:`lilka.draw()`.

.. warning::

   Якщо ви визначите :lua:func:`lilka.update()` або :lua:func:`lilka.draw()` у своїй програмі, то для завершення програми вам потрібно викликати :lua:func:`util.exit()`. Інакше програма буде виконуватися постійно, поки ви не вимкнете Лілку.

.. warning::
   Не варто використовувати :lua:func:`util.sleep` всередині ваших функцій :lua:func:`lilka.update()` та :lua:func:`lilka.draw()`, оскільки це призведе до заповільнення виконання програми.

:lua:func:`lilka.update()` також отримує необов'язковий аргумент ``delta``, який вказує (в секундах), скільки часу пройшло з початку її попереднього виклику.
Це дозволяє вам робити рухи та анімації, які будуть відбуватись з однаковою швидкістю незалежно від швидкості виконання програми.

За ідеальних обставин, ``delta`` буде дорівнювати 1/30, або приблизно 0.0333 секунди, але якщо код гри дуже складний і його виконання займає більше часу, ніж 1/30 мекунди, то значення ``delta`` буде більшим.
Ваша програма може використовувати ``delta`` для того, щоб, наприклад, рухати об'єкти на екрані залежно від часу, а не від кількості кадрів на секунду.

Ці три функції повинні бути визначений у головному файлі програми, наприклад:

.. code-block:: lua
    :linenos:

    local ball_x
    local ball_y

    local ball = resources.load_image("ball.bmp", display.color565(255, 255, 255))

    function lilka.init()
        -- Ця функція викликається один раз при запуску програми.
        -- Цей код можна було б виконати в глобальному контексті (поза цією функцією), як ми це зробили з "ball",
        -- але ініціалізація гри буде очевиднішою, якщо вона відбувається тут.
        ball_x = display.width / 2
        ball_y = display.height / 2
    end

    function lilka.update(delta)
        local dir_x = 0
        local dir_y = 0

        -- Обробляємо введення користувача:
        local state = controller.get_state()
        if state.up.pressed then
            dir_y = -1
        elseif state.down.pressed then
            dir_y = 1
        end
        if state.left.pressed then
            dir_x = -1
        elseif state.right.pressed then
            dir_x = 1
        end
        if state.a.pressed then
            -- Вихід з програми:
            util.exit()
        end

        -- Переміщуємо м'яч зі швидкістю 50 пікселів на секунду
        ball_x = ball_x + dir_x * 50 * delta
        ball_y = ball_y + dir_y * 50 * delta
    end

    function lilka.draw()
        -- Малюємо графіку:
        display.fill_screen(display.color565(0, 0, 0))
        display.draw_image(ball, ball_x, ball_y)

        -- Після виконання цієї функції Лілка автоматично відобразить все, що ми намалювали на екрані.
    end

    -- Інші функції:
    -- ...

Цей код створить просту гру, в якій ви можете керувати м'ячем за допомогою стрілок на контролері. Кожен кадр гри м'яч переміщується на певну відстань, залежно від введення користувача, а потім малюється на екрані.

Завдяки аргументу ``delta`` м'яч завжди рухатиметься з однаковою швидкістю незалежно від того, як швидко виконується програма - чи це 30 кадрів на секунду, чи 10, чи 1000.
