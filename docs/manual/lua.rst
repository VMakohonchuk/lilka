Написання програм на Lua
========================

Основна прошивка Лілки має вбудовану віртуальну машину мови програмування Lua. Це дозволяє писати та виконувати програми на Lua прямо з SD-картки, без необхідності компіляції чи перепрошивання Лілки.

.. warning:: Якщо ви не знайомі з мовою Lua, рекомендуємо прочитати туторіал з Lua перед тим, як продовжувати: https://www.lua.org/pil/1.html

Приклад програми
----------------

Оскільки Lua сама по собі - це універсальна мова програмування, вона не має вбудованих функцій для роботи з дисплеєм, звуком, тощо. Тому для роботи з цими пристроями на Лілці використовуються спеціальні вбудовані модулі, які надають доступ до функцій пристроїв.

Модулі в Lua на Лілці завантажуються автоматично - не потрібно писати жодних ``require(...)``. Ось приклад простої програми на Lua, яка виводить текст "Hello, world!" на екран:

.. code-block:: lua
    :linenos:

    -- Заповнюємо екран чорним кольором:
    display.fill_screen(display.color565(0, 0, 0))

    -- Виводимо текст "Hello, world!" на екран:
    display.set_cursor(0, 32)
    display.print("Hello, world!")

    -- Чекаємо 2 секунди:
    util.delay(2000)

    -- На цьому програма автоматично завершиться.

Ви можете зберегти цей код у файл з розширенням ``.lua`` на SD-картці, а потім виконати його, обравши його в браузері SD-картки.

Повний перелік доступних модулів та їх функцій можна знайти в розділі `Lua API </lua>`_.

Написання ігор
--------------

В іграх важливо, щоб гра була плавною та виконувалася з певною кількістю кадрів на секунду.

Для простих програм на Lua, які не вимагають точності в швидкості виконання, можна використовувати ``util.delay(...)`` для затримки виконання програми. Однак це незручно для ігор.

Для цього існує можливість визначити функцію ``_update()``. Якщо при запуску вашої програми Лілка знайде цю функції, вона буде викликати її автоматично.

``_update()`` викликається 30 разів на секунду, тому ви можете використовувати його для оновлення стану гри, обробки введення користувача, малювання графіки, тощо.

.. warning::

   Якщо ви визначите ``_update()`` у своїй програмі, то для завершення програми вам потрібно викликати ``os.exit()``. Інакше програма буде виконуватися постійно, поки ви не вимкнете Лілку.

   Крім того, не варто використовувати :lua:func:`util.delay` у програмах, які використовують ``_update()``, оскільки це призведе до заповільнення виконання програми.

``_update()`` також отримує необов'язковий аргумент ``delta``, який вказує (в секундах), скільки часу пройшло з початку попереднього виклику ``_update()``.
Це дозволяє вам робити рухи та анімації, які будуть відбуватись з однаковою швидкістю незалежно від швидкості виконання програми.
За ідеальних обставин, ``delta`` буде дорівнювати 1/30, або приблизно 0.0333 секунди, але якщо код гри дуже складний, то значення ``delta`` може бути більшим.

``_update()`` повинен бути визначений у головному файлі програми, наприклад:

.. code-block:: lua
    :linenos:

    local ball_x = display.width / 2
    local ball_y = display.height / 2

    local ball_speed_x = 100 -- швидкість м'яча по горизонталі (пікселів на секунду)
    local ball_speed_y = 100 -- швидкість м'яча по вертикалі (пікселів на секунду)

    local ball = resources.load_bitmap("ball.bmp", display.color565(255, 255, 255))

    function _update(delta)
        -- Обробляємо введення користувача:
        if controller.up.pressed then
            ball_x = ball_x + ball_speed_x * delta
        elseif controller.down.pressed then
            ball_x = ball_x - ball_speed_x * delta
        end
        if controller.left.pressed then
            ball_y = ball_y - ball_speed_y * delta
        elseif controller.right.pressed then
            ball_y = ball_y + ball_speed_y * delta
        end
        if controller.a.pressed then
            -- Вихід з програми:
            util.exit()
        end

        -- Малюємо графіку:
        display.fill_screen(display.color565(0, 0, 0))
        display.draw_bitmap(ball, ball_x, ball_y)

        -- Оновлюємо екран:
        display.render()
    end

    -- Інші функції:
    -- ...

Цей код створить просту гру, в якій ви можете керувати м'ячем за допомогою стрілок на контролері. Кожен кадр гри м'яч переміщується на певну відстань, залежно від введення користувача, а потім малюється на екрані.
